#!/bin/bash

# Script d'installation pour LLDP Discovery sur Debian 12
# Auteur: Generated by GitHub Copilot
# Date: 2025-07-10

set -e  # Arr√™ter le script en cas d'erreur

echo "üöÄ Installation de LLDP Discovery sur Debian 12"
echo "================================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que le script est ex√©cut√© sur Debian
if ! grep -q "Debian" /etc/os-release; then
    print_error "Ce script est con√ßu pour Debian. Distribution d√©tect√©e :"
    cat /etc/os-release | grep PRETTY_NAME
    exit 1
fi

print_success "Debian d√©tect√©, poursuite de l'installation..."

# Mise √† jour du syst√®me
print_status "Mise √† jour du syst√®me..."
sudo apt update && sudo apt upgrade -y

# Installation des paquets syst√®me n√©cessaires
print_status "Installation des paquets syst√®me..."
sudo apt install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    git \
    curl \
    wget \
    jq \
    ssh \
    nmap \
    build-essential \
    libssl-dev \
    libffi-dev

print_success "Paquets syst√®me install√©s"

# V√©rifier la version de Python
PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
print_status "Version Python d√©tect√©e: $PYTHON_VERSION"

if [[ $(echo "$PYTHON_VERSION" | cut -d'.' -f1) -lt 3 ]] || [[ $(echo "$PYTHON_VERSION" | cut -d'.' -f2) -lt 8 ]]; then
    print_error "Python 3.8 ou sup√©rieur requis. Version actuelle: $PYTHON_VERSION"
    exit 1
fi

# Cr√©er un environnement virtuel
print_status "Cr√©ation de l'environnement virtuel..."
if [ -d "lldp-env" ]; then
    print_warning "L'environnement virtuel existe d√©j√†"
    read -p "Voulez-vous le recr√©er ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf lldp-env
        python3 -m venv lldp-env
    fi
else
    python3 -m venv lldp-env
fi

print_success "Environnement virtuel cr√©√©"

# Activer l'environnement virtuel
print_status "Activation de l'environnement virtuel..."
source lldp-env/bin/activate

# Mettre √† jour pip
print_status "Mise √† jour de pip..."
pip install --upgrade pip setuptools wheel

# Installer les d√©pendances Python
if [ -f "requirements.txt" ]; then
    print_status "Installation des d√©pendances Python..."
    pip install -r requirements.txt
    print_success "D√©pendances Python install√©es"
else
    print_warning "Fichier requirements.txt non trouv√©, installation manuelle..."
    pip install netmiko paramiko ansible pyaml
fi

# Installer les collections Ansible si le r√©pertoire ansible existe
if [ -d "ansible" ]; then
    print_status "Installation des collections Ansible..."
    cd ansible
    if [ -f "requirements.yml" ]; then
        ansible-galaxy collection install -r requirements.yml
    else
        # Installation manuelle des collections essentielles
        ansible-galaxy collection install arubanetworks.arubaoss
        ansible-galaxy collection install community.general
    fi
    cd ..
    print_success "Collections Ansible install√©es"
fi

# Cr√©er le r√©pertoire de sortie s'il n'existe pas
if [ ! -d "output" ]; then
    mkdir -p output
    print_status "R√©pertoire 'output' cr√©√©"
fi

# D√©finir les permissions appropri√©es
chmod +x python/*.py 2>/dev/null || true
chmod +x ansible/*.yml 2>/dev/null || true

# Afficher les informations de fin d'installation
echo
print_success "üéâ Installation termin√©e avec succ√®s !"
echo
echo "üìã √âtapes suivantes :"
echo "1. Activez l'environnement virtuel :"
echo "   source lldp-env/bin/activate"
echo
echo "2. Configurez vos switches dans :"
echo "   - python/switches_config.json"
echo "   - ansible/inventory.ini"
echo
echo "3. Testez la connectivit√© :"
echo "   python3 python/test_connectivity.py"
echo
echo "4. Lancez la d√©couverte LLDP :"
echo "   python3 python/lldp_discovery.py -v"
echo "   ou"
echo "   cd ansible && ansible-playbook -i inventory.ini lldp_discovery.yml"
echo
echo "üìö Consultez le README.md pour plus d'informations"
echo

# Cr√©er un script d'activation rapide
cat > activate_env.sh << EOF
#!/bin/bash
# Script d'activation rapide de l'environnement LLDP Discovery
source lldp-env/bin/activate
echo "Environnement LLDP Discovery activ√©"
echo "Utilisez 'deactivate' pour quitter l'environnement"
EOF

chmod +x activate_env.sh
print_status "Script d'activation 'activate_env.sh' cr√©√©"

# V√©rification finale
print_status "V√©rification de l'installation..."
python3 -c "import netmiko, paramiko, yaml; print('‚úÖ Modules Python import√©s avec succ√®s')" || print_error "‚ùå Probl√®me avec les modules Python"
ansible --version > /dev/null && print_success "‚úÖ Ansible install√© et fonctionnel" || print_warning "‚ö†Ô∏è  Probl√®me avec Ansible"

print_success "Installation v√©rifi√©e !"
